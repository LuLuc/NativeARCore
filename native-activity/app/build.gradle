apply plugin: 'com.android.application'
def arcore_libpath = "${buildDir}/arcore-native"
configurations { natives }

android {
    compileSdkVersion 29
    ndkVersion '22.0.7026061'

    defaultConfig {
        applicationId = 'com.example.nativeAR'
        minSdkVersion 14
        targetSdkVersion 28
        externalNativeBuild {
            cmake {
                arguments "-DANDROID_STL=c++_static",
                        "-DARCORE_LIBPATH=${arcore_libpath}/jni"
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'),
                    'proguard-rules.pro'
        }
    }
    externalNativeBuild {
        cmake {
            version '3.10.2'
            path 'src/main/cpp/CMakeLists.txt'
        }
    }
}

task extractNativeLibraries() {
    // Extract every time.
    outputs.upToDateWhen { false }

    doFirst {
        configurations.natives.files.each { f ->
            copy {
                from zipTree(f)
                into arcore_libpath
                include "jni/**/*"
            }
        }
    }
}

tasks.whenTaskAdded {
    task-> if (task.name.contains("external") && !task.name.contains("Clean")) {
        task.dependsOn(extractNativeLibraries)
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'com.google.android.gms:play-services-auth:18.0.0'
    implementation 'com.google.android.gms:play-services-location:18.0.0'
    implementation 'com.google.ar:core:1.20.0'
    natives 'com.google.ar:core:1.20.0'
}
